# Autogenerated by auto2cmake on 2018-03-12 19:20:51

# Options

cmake_minimum_required(VERSION 2.8)

# Do not use assembler optimization
option( ASSEMBLER "Do not use assembler optimization " OFF )

# Take out debug symbols, Asserts, Int3, etc
option( DEBUG "Take out debug symbols, Asserts, Int3, etc " OFF )

# Build editor? (not functional)
option( EDITOR "Build editor? (not functional)" OFF )

# Enable ENABLE_ASSEMBLER
option( ENABLE_ASSEMBLER "Enable ENABLE_ASSEMBLER" OFF )

# Enable ENABLE_KALINIX
option( ENABLE_KALINIX "Enable ENABLE_KALINIX" OFF )

# Enable ENABLE_LINUXJOY
option( ENABLE_LINUXJOY "Enable ENABLE_LINUXJOY" OFF )

# Enable ENABLE_MACDATA
option( ENABLE_MACDATA "Enable ENABLE_MACDATA" OFF )

# Enable ENABLE_NATIVE_IPX
option( ENABLE_NATIVE_IPX "Enable ENABLE_NATIVE_IPX" OFF )

# Enable ENABLE_NETWORK
option( ENABLE_NETWORK "Enable ENABLE_NETWORK" OFF )

# Disable fast file i/o.
option( FASTFILEIO "Disable fast file i/o. " OFF )

# Enable HAVE_LIBPNG
option( HAVE_LIBPNG "Enable HAVE_LIBPNG" OFF )

# Disable the KaliNix driver (unix-only)
option( KALINIX "Disable the KaliNix driver (unix-only)" OFF )

# do not use the SDL Joystick. (eg for MS Sidewinder)
option( LINUXJOY "do not use the SDL Joystick. (eg for MS Sidewinder)" OFF )

# Build for mac datafiles
option( MACDATA "Build for mac datafiles" OFF )

# Enable MACOSX
option( MACOSX "Enable MACOSX" OFF )

# Enable MINGW32
option( MINGW32 "Enable MINGW32" OFF )

# Enable MSDOS
option( MSDOS "Enable MSDOS" OFF )

# Do not build network/serial support
option( NETWORK "Do not build network/serial support " OFF )

# Release build.  Removes debug/editor things
option( RELEASE "Release build.  Removes debug/editor things " OFF )

# Dependencies
find_package(SDL)
if(SDL_FOUND)
message("${SDL_LIBRARY}")
message("${SDL_INCLUDE_DIR}")
message("${SDL_VERSION_STRING}")
endif()
find_package(SDL_mixer)
if(SDL_FOUND)
message("${SDL_MIXER_LIBRARIES}")
message("${SDL_MIXER_INCLUDE_DIRS}")
message("${SDL_MIXER_VERSION_STRING}")
endif()
find_package(SDL_image)
if(SDL_FOUND)
message("${SDL_IMAGE_LIBRARIES}")
message("${SDL_IMAGE_INCLUDE_DIRS}")
message("${SDL_IMAGE_VERSION_STRING}")
endif()
find_package(PhysFS)
find_package(OpenGL)


include(CheckStructHasMember)
CHECK_STRUCT_HAS_MEMBER("struct timeval" tv_sec sys/time.h HAVE_STRUCT_TIMEVAL)
CHECK_STRUCT_HAS_MEMBER("struct timespec" tv_sec sys/time.h HAVE_STRUCT_TIMESPEC)

include(CheckIncludeFile)
CHECK_INCLUDE_FILE("netipx/ipx.h" HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILE("unistd.h" HAVE_UNISTD_H)

configure_file(conf.h.cmakein conf.h)

# Setting the include directory for the application to find config.h
include_directories( ${CMAKE_BINARY_DIR} )

# Since we have created a config.h add a global define for it
add_definitions( "-DHAVE_CONFIG_H" )

#trivial utilities
add_executable(hogcreate ${${project}_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/utilities/hogcreate.c)
add_executable(hogextract ${${project}_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/utilities/hogextract.c)
add_executable(mvlcreate ${${project}_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/utilities/mvlcreate.c)
add_executable(mvlextract ${${project}_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/utilities/mvlextract.c)
add_executable(txb2tex ${${project}_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/utilities/txb2tex.c)
add_executable(tex2txb ${${project}_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/utilities/tex2txb.c)


# Generating the library mveplayer
set(project "mveplayer")

set(${project}, "")
list(APPEND ${project}_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/libmve/decoder16.c
    ${CMAKE_CURRENT_SOURCE_DIR}/libmve/decoder8.c
    ${CMAKE_CURRENT_SOURCE_DIR}/libmve/mve_audio.c
    ${CMAKE_CURRENT_SOURCE_DIR}/libmve/mve_main.c
    ${CMAKE_CURRENT_SOURCE_DIR}/libmve/mvelib.c
    ${CMAKE_CURRENT_SOURCE_DIR}/libmve/mveplay.c
)
if(SDL_INCLUDE_DIR MATCHES ".framework")
list(APPEND ${project}_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/cocoa/SDLMain.m
)
endif()

add_executable(mveplayer ${${project}_SOURCES} )

include_directories(${SDL_INCLUDE_DIR} ${SDL_MIXER_INCLUDE_DIRS})
target_link_libraries(mveplayer)


# d2x common properties

set(_d2x_INCLUDEDIRS
    "${PROJECT_SOURCE_DIR}/include"
    "${PROJECT_SOURCE_DIR}/main"
    "${PROJECT_SOURCE_DIR}/arch/include"
)

file(GLOB _d2x_HEADERS "arch/include/*.h" "include/*.h" "main/*.h")
set_source_files_properties(${_d2x_HEADERS} PROPERTIES HEADER_FILE_ONLY TRUE)

list(APPEND _d2x_SOURCES
    ${_d2x_HEADERS}
    ${CMAKE_CURRENT_SOURCE_DIR}/2d/2dsline.c
    ${CMAKE_CURRENT_SOURCE_DIR}/2d/bitblt.c
    ${CMAKE_CURRENT_SOURCE_DIR}/2d/bitmap.c
    ${CMAKE_CURRENT_SOURCE_DIR}/2d/box.c
    ${CMAKE_CURRENT_SOURCE_DIR}/2d/canvas.c
    ${CMAKE_CURRENT_SOURCE_DIR}/2d/circle.c
    ${CMAKE_CURRENT_SOURCE_DIR}/2d/disc.c
    ${CMAKE_CURRENT_SOURCE_DIR}/2d/font.c
    ${CMAKE_CURRENT_SOURCE_DIR}/2d/gpixel.c
    ${CMAKE_CURRENT_SOURCE_DIR}/2d/gr.c
    ${CMAKE_CURRENT_SOURCE_DIR}/2d/ibitblt.c
    ${CMAKE_CURRENT_SOURCE_DIR}/2d/line.c
    ${CMAKE_CURRENT_SOURCE_DIR}/2d/palette.c
    ${CMAKE_CURRENT_SOURCE_DIR}/2d/pcx.c
    ${CMAKE_CURRENT_SOURCE_DIR}/2d/pixel.c
    ${CMAKE_CURRENT_SOURCE_DIR}/2d/rect.c
    ${CMAKE_CURRENT_SOURCE_DIR}/2d/rle.c
    ${CMAKE_CURRENT_SOURCE_DIR}/2d/scalec.c

    ${CMAKE_CURRENT_SOURCE_DIR}/3d/clipper.c
    ${CMAKE_CURRENT_SOURCE_DIR}/3d/draw.c
    ${CMAKE_CURRENT_SOURCE_DIR}/3d/globvars.c
    ${CMAKE_CURRENT_SOURCE_DIR}/3d/instance.c
    ${CMAKE_CURRENT_SOURCE_DIR}/3d/interp.c
    ${CMAKE_CURRENT_SOURCE_DIR}/3d/matrix.c
    ${CMAKE_CURRENT_SOURCE_DIR}/3d/points.c
    ${CMAKE_CURRENT_SOURCE_DIR}/3d/rod.c
    ${CMAKE_CURRENT_SOURCE_DIR}/3d/setup.c

    ${CMAKE_CURRENT_SOURCE_DIR}/arch/sdl/digi.c
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/sdl/init.c
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/sdl/midi.c
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/sdl/rbaudio.c
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/sdl/timer.c

    ${CMAKE_CURRENT_SOURCE_DIR}/iff/iff.c

    ${CMAKE_CURRENT_SOURCE_DIR}/libmve/decoder16.c
    ${CMAKE_CURRENT_SOURCE_DIR}/libmve/decoder8.c
    ${CMAKE_CURRENT_SOURCE_DIR}/libmve/mve_audio.c
    ${CMAKE_CURRENT_SOURCE_DIR}/libmve/mvelib.c
    ${CMAKE_CURRENT_SOURCE_DIR}/libmve/mveplay.c

    ${CMAKE_CURRENT_SOURCE_DIR}/main/ai.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/ai2.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/aipath.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/automap.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/bm.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/cli.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/cmd.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/cntrlcen.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/collide.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/config.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/console.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/controls.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/credits.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/cvar.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/digiobj.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/effects.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/endlevel.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/entity.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/escort.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/fireball.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/fuelcen.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/fvi.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/game.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/gamecntl.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/gamefont.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/gamemine.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/gamepal.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/gamerend.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/gamesave.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/gameseg.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/gameseq.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/gauges.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/hostage.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/hud.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/inferno.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/kconfig.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/kludge.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/laser.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/lighting.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/menu.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/mglobal.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/mission.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/morph.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/movie.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/newdemo.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/newmenu.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/object.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/paging.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/physics.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/piggy.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/player.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/polyobj.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/powerup.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/render.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/robot.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/scores.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/segment.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/slew.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/songs.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/state.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/switch.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/terrain.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/texmerge.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/text.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/titles.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/vclip.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/wall.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/weapon.c

    ${CMAKE_CURRENT_SOURCE_DIR}/maths/rand.c
    ${CMAKE_CURRENT_SOURCE_DIR}/maths/tables.c
    ${CMAKE_CURRENT_SOURCE_DIR}/maths/vecmat.c

    ${CMAKE_CURRENT_SOURCE_DIR}/mem/mem.c

    ${CMAKE_CURRENT_SOURCE_DIR}/misc/args.c
    ${CMAKE_CURRENT_SOURCE_DIR}/misc/error.c
    ${CMAKE_CURRENT_SOURCE_DIR}/misc/hash.c
    ${CMAKE_CURRENT_SOURCE_DIR}/misc/hmp.c
    ${CMAKE_CURRENT_SOURCE_DIR}/misc/ignorecase.c
    ${CMAKE_CURRENT_SOURCE_DIR}/misc/physfsrwops.c
    ${CMAKE_CURRENT_SOURCE_DIR}/misc/strio.c
    ${CMAKE_CURRENT_SOURCE_DIR}/misc/strutil.c

    ${CMAKE_CURRENT_SOURCE_DIR}/texmap/ntmap.c
    ${CMAKE_CURRENT_SOURCE_DIR}/texmap/scanline.c
)

#no asm additions
list(APPEND _d2x_SOURCES
	${CMAKE_CURRENT_SOURCE_DIR}/2d/tmerge.c
	${CMAKE_CURRENT_SOURCE_DIR}/maths/fixc.c
)

list(APPEND _unused_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/2d/tmerge.c

    ${CMAKE_CURRENT_SOURCE_DIR}/arch/dos/digi.c
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/dos/dpmi.c
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/dos/findfile.c
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/dos/init.c
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/dos/ipx.c
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/dos/joyc.c
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/dos/joydefs.c
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/dos/key.c
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/dos/mouse.c
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/dos/rbaudio.c
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/dos/vesa.c
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/dos/vid.c

    ${CMAKE_CURRENT_SOURCE_DIR}/main/kmatrix.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/multi.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/multibot.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/netmisc.c
    ${CMAKE_CURRENT_SOURCE_DIR}/main/network.c

    ${CMAKE_CURRENT_SOURCE_DIR}/misc/pngfile.c

    ${CMAKE_CURRENT_SOURCE_DIR}/maths/fixc.c

    ${CMAKE_CURRENT_SOURCE_DIR}/texmap/tmappent.S
    ${CMAKE_CURRENT_SOURCE_DIR}/texmap/tmapppro.S
)

source_group(TREE ${PROJECT_SOURCE_DIR} FILES ${_d2x_SOURCES})

# Generating the library d2x
set(project "d2x")

include_directories(${_d2x_INCLUDEDIRS})
set(${project}, "")
list(APPEND ${project}_SOURCES
    ${_d2x_SOURCES}
)
add_executable(d2x ${${project}_SOURCES})
target_link_libraries(d2x)


# Generating the library d2x-sdl
set(project "d2x_sdl")

include_directories(${_d2x_INCLUDEDIRS})
set(${project}, "")
list(APPEND ${project}_SOURCES
	${_d2x_SOURCES}
	${CMAKE_CURRENT_SOURCE_DIR}/arch/linux/init.c
	${CMAKE_CURRENT_SOURCE_DIR}/arch/sdl/event.c
	${CMAKE_CURRENT_SOURCE_DIR}/arch/sdl/key.c
	${CMAKE_CURRENT_SOURCE_DIR}/arch/sdl/mouse.c
	${CMAKE_CURRENT_SOURCE_DIR}/arch/sdl/joy.c
	${CMAKE_CURRENT_SOURCE_DIR}/arch/sdl/joydefs.c
	${CMAKE_CURRENT_SOURCE_DIR}/arch/sdl/vid.c
	${CMAKE_CURRENT_SOURCE_DIR}/texmap/tmapflat.c
)
if(SDL_INCLUDE_DIR MATCHES ".framework")
	list(APPEND ${project}_SOURCES
		${CMAKE_CURRENT_SOURCE_DIR}/arch/cocoa/SDLMain.m
	)
endif()
add_executable(d2x-sdl ${${project}_SOURCES})
target_link_libraries(d2x-sdl
	${SDL_LIBRARY}
	${SDL_MIXER_LIBRARIES}
	${SDL_IMAGE_LIBRARIES}
	${PHYSFS_LIBRARY}
)
set_target_properties(d2x-sdl PROPERTIES COMPILE_DEFINITIONS "SDL_VIDEO")


# Generating the library d2x-gl
set(project "d2x_gl")

set(${project}, "")
list(APPEND ${project}_SOURCES
	${_d2x_SOURCES}
	${CMAKE_CURRENT_SOURCE_DIR}/arch/linux/init.c
	${CMAKE_CURRENT_SOURCE_DIR}/arch/sdl/event.c
	${CMAKE_CURRENT_SOURCE_DIR}/arch/sdl/key.c
	${CMAKE_CURRENT_SOURCE_DIR}/arch/sdl/mouse.c
	${CMAKE_CURRENT_SOURCE_DIR}/arch/sdl/joy.c
	${CMAKE_CURRENT_SOURCE_DIR}/arch/sdl/joydefs.c
	${CMAKE_CURRENT_SOURCE_DIR}/arch/ogl/vid.c
	${CMAKE_CURRENT_SOURCE_DIR}/arch/ogl/ogl.c
	${CMAKE_CURRENT_SOURCE_DIR}/arch/ogl/sdlgl.c
)

if(SDL_INCLUDE_DIR MATCHES ".framework")
	list(APPEND ${project}_SOURCES
		${CMAKE_CURRENT_SOURCE_DIR}/arch/cocoa/SDLMain.m
	)
endif()
add_executable(d2x-gl ${${project}_SOURCES})
target_link_libraries(d2x-gl
	${SDL_LIBRARY}
	${SDL_MIXER_LIBRARIES}
	${SDL_IMAGE_LIBRARIES}
	${PHYSFS_LIBRARY}
	${OPENGL_LIBRARIES}
)
set_target_properties(d2x-gl PROPERTIES COMPILE_DEFINITIONS "OGL;SDL_GL_VIDEO")


# Generating the library d2x-svga
set(project "d2x_svga")

include_directories(${_d2x_INCLUDEDIRS})
set(${project}, "")
list(APPEND ${project}_SOURCES
    ${_d2x_SOURCES}
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/svgalib/event.c
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/svgalib/init.c
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/svgalib/key.c
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/svgalib/mouse.c
    ${CMAKE_CURRENT_SOURCE_DIR}/arch/svgalib/vid.c
)
add_executable(d2x-svga ${${project}_SOURCES} )
set_target_properties( d2x-svga
    PROPERTIES COMPILE_FLAGS "-DSVGALIB_INPUT"
)
target_link_libraries( d2x-svga
    vga
    vgagl
)


# miner common properties
list(APPEND _miner_SOURCES
        ${CMAKE_CURRENT_SOURCE_DIR}/main/bmread.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/dumpmine.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/autosave.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/centers.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/curves.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/eglobal.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/ehostage.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/elight.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/eobject.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/eswitch.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/fixseg.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/func.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/group.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/info.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/kbuild.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/kcurve.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/kfuncs.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/kgame.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/kgroup.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/khelp.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/kmine.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/ksegmove.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/ksegsel.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/ksegsize.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/ktmap.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/kview.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/macro.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/med.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/meddraw.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/medmisc.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/medrobot.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/medsel.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/medwall.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/mine.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/objpage.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/segment.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/seguvs.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/texpage.c
        ${CMAKE_CURRENT_SOURCE_DIR}/main/editor/texture.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/barbox.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/button.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/checkbox.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/file.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/gadget.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/icon.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/inputbox.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/keypad.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/keypress.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/keytrap.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/listbox.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/menu.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/menubar.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/message.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/mouse.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/number.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/popup.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/radio.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/scroll.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/ui.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/uidraw.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/userbox.c
        ${CMAKE_CURRENT_SOURCE_DIR}/ui/window.c
)


# Generating the library miner
set(project "miner")
set(${project}, "")

include_directories(${_d2x_INCLUDEDIRS})
list(APPEND ${project}_SOURCES
        ${d2x_SOURCES}
        ${_miner_SOURCES}
)
add_executable(miner ${${project}_SOURCES})
target_link_libraries(miner)
set_target_properties(miner PROPERTIES COMPILE_DEFINITIONS "EDITOR")


# Generating the library miner-sdl
set(project "miner_sdl")
set(${project}, "")

include_directories(${_d2x_INCLUDEDIRS})
add_definitions(${_miner_DEFINITIONS})
list(APPEND ${project}_SOURCES
        ${d2x_sdl_SOURCES}
        ${_miner_SOURCES}
)
add_executable(miner-sdl ${${project}_SOURCES} )
include_directories(${SDL_INCLUDE_DIR} ${SDL_MIXER_INCLUDE_DIRS} ${SDL_IMAGE_INCLUDE_DIRS} ${PHYSFS_INCLUDE_DIR})
target_link_libraries(miner-sdl)
set_target_properties(miner-sdl PROPERTIES COMPILE_DEFINITIONS "EDITOR;SDL_VIDEO")


# Generating the library miner-gl
set(project "miner_gl")
set(${project}, "")

include_directories(${_d2x_INCLUDEDIRS})
add_definitions(${_miner_DEFINITIONS})
list(APPEND ${project}_SOURCES
        ${d2x_gl_SOURCES}
        ${_miner_SOURCES}
)
add_executable(miner-gl ${${project}_SOURCES} )
include_directories(${SDL_INCLUDE_DIR} ${SDL_MIXER_INCLUDE_DIRS} ${SDL_IMAGE_INCLUDE_DIRS} ${PHYSFS_INCLUDE_DIR})
target_link_libraries(miner-gl)
set_target_properties(miner-gl PROPERTIES COMPILE_DEFINITIONS "EDITOR;OGL;SDL_GL_VIDEO")


# Generating the library miner-svga
set(project "miner_svga")
set(${project}, "")

include_directories(${_d2x_INCLUDEDIRS})
add_definitions(${_miner_DEFINITIONS})
list(APPEND ${project}_SOURCES
	${d2x_svga_SOURCES}
	${_miner_SOURCES}
)
add_executable(miner-svga ${${project}_SOURCES} )
target_link_libraries(miner-svga)
set_target_properties(miner-svga PROPERTIES COMPILE_DEFINITIONS "EDITOR")


#Some global stuff

set_target_properties(d2x d2x-svga miner miner-svga PROPERTIES EXCLUDE_FROM_ALL 1)
